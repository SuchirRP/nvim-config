-- Editor Settings
vim.opt.compatible = false			-- disble vi compatibility
vim.opt.showmatch = true			-- show matching
vim.opt.mouse = v				-- middle-click paste
vim.opt.hlsearch = true				-- highlight search
vim.opt.incsearch = true			-- incremental search
vim.opt.tabstop = 4				-- tab = 4 spaces
vim.opt.softtabstop = 4				-- recognize 4 spaces as tab
vim.opt.expandtab = true			-- converts tabs to white spaces
vim.opt.shiftwidth = 4				-- autoindent number of spaces
vim.opt.autoindent = true			-- indent new line to same amount as current
vim.opt.number = true				-- adds line numbers
vim.opt.wildmode = longest,true			-- get bash-like completions
vim.cmd("filetype plugin indent on")		-- allow auto indenting dependin on file type
vim.cmd("syntax on")				-- syntax highlightinhg
vim.cmd.mouse = a				-- enable mouse click
vim.cmd.clipboard = unnamedplus			-- use system clipboard
vim.cmd("filetype plugin on")			
vim.opt.ttyfast = true				-- speed up scrolling
--vim.opt.spell = true				-- enable spell checking
--vim.opt.noswapfile = true			-- disable swap file

-- Lazy nvim - Plugin Manager
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

require("lazy").setup({
    -- lsp stuff
    {'neovim/nvim-lspconfig'},                      -- nvim lspconfig
    {'williamboman/mason.nvim', dependencies = {    -- lsp installer
        'williamboman/mason-lspconfig.nvim',
        'mfussenegger/nvim-dap',
        'rcarriga/nvim-dap-ui',
        'jose-elias-alvarez/null-ls.nvim',
        'mfussenegger/nvim-lint',
        'jose-elias-alvarez/null-ls.nvim',
        'mhartington/formatter.nvim'}},
    {'j-hui/fidget.nvim'},                          -- nvim-lsp load progress
    {'folke/neodev.nvim'},                          -- configures lua-language-server for your Neovim config

    -- autocomplete
    {'hrsh7th/nvim-cmp', dependencies = {
        'hrsh7th/cmp-nvim-lsp',
        'hrsh7th/cmp-buffer',
        'hrsh7th/cmp-path',
        'hrsh7th/cmp-cmdline',
        'hrsh7th/nvim-cmp',

        'L3MON4D3/LuaSnip',                         -- luasnips snippet for completion engine
        'saadparwaiz1/cmp_luasnip',
        'rafamadriz/friendly-snippets'              -- adds community snippets
    }},

    {'folke/which-key.nvim'}                        -- shows possible keybinds
})

-- configs
--- lsp stuff
--- mason
require("mason").setup({
    ui = {
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})
require("mason-lspconfig").setup()
---
--- nvim-cmp
local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        --vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      -- { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'git' }, -- You can specify the `git` source if [you were installed it](https://github.com/petertriho/cmp-git).
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` and `?` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline({ '/', '?' }, {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })
---
--- lspconfig
local lspconfig = require('lspconfig')          -- set up induvidual servers after this point
require("lspconfig").lua_ls.setup {}
---
